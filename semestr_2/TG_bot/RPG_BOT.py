import asyncio
import random

import datetime

import text
import telebot
from telebot.types import (Message, InlineKeyboardButton as IB, CallbackQuery, InlineKeyboardMarkup as IKM,
                           ReplyKeyboardMarkup as RKM, ReplyKeyboardRemove as RKR)
from db_tg import *
from config import TOKEN
import fight

bot = telebot.TeleBot(TOKEN)
temp = {}
clear = RKR()
stats_player = {}


class Enemy:
    enemies = {
        "–†–æ–±–æ—Ç-—Å–∞–º—ã–π –∫—Ä—É—Ç–æ–π": [40, 40, 30],
        "–†–æ–±–æ—Ç-–∫–æ–Ω–∫—É—Ä–µ–Ω—Ç —Å–∞–º–æ–≥–æ –∫—Ä—É—Ç–æ–≥–æ —Ä–æ–±–æ—Ç–∞": [35, 35, 25],
        "–†–æ–±–æ—Ç-–∫—Ä—É—Ç–æ–π": [30, 30, 20],
        "–†–æ–±–æ—Ç-–ø–æ—á—Ç–∏ –∫—Ä—É—Ç–æ–π": [29, 29, 19],
        "–†–æ–±–æ—Ç-–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫—Ä—É—Ç–æ–π": [25, 25, 15],
        "–†–æ–±–æ—Ç-–ø–æ—á—Ç–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫—Ä—É—Ç–æ–π": [24, 24, 14],
        "–†–æ–±–æ—Ç-–Ω–µ –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ–π": [20, 20, 10],
        "–†–æ–±–æ—Ç-—Ç–∞–∫ —Å–µ–±–µ –ø–æ –æ–ø—ã—Ç—É": [20, 20, 1],
        "–†–æ–±–æ—Ç-–Ω–µ –∫—Ä—É—Ç–æ–π": [10, 10, 5],
        "–†–æ–±–æ—Ç-–∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–∞—Å–ª—É–∂–∏–ª –≤–Ω–∏–º–∞–Ω–∏—è": [5, 5, 2],
        "–°–ê–ú–´–ô –°–õ–ê–ë–´–ô –†–û–ë–û–¢": [1, 1, 0],
        "–û—á–µ–Ω—å –æ–±—ã—á–Ω–æ-—Å—Ä–µ–¥–Ω–∏–π –ø—Ä—è–º —Å—Ä–µ–¥–Ω—è—á–æ–∫,–Ω–µ –∏–º–µ—é—â–∏–π –Ω–∏–∫–∞–∫–æ–≥–æ —Ç–∏—Ç—É–ª–∞,–∫–æ—Ç–æ—Ä—ã–π –ø—Ä—è–º –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –æ–±—â–µ—Å—Ç–≤–∞ —Ä–æ–±–æ—Ç–æ–≤,"
        "–∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–ª–∏—á–∏—Ç–µ–ª—å–Ω—ã—Ö —á–µ—Ä—Ç-—Ä–æ–±–æ—Ç": [20, 20, 20],
        "–í–æ–ª–∫": [5, 5, 3],
        "–ú—É–∂–∏–∫": [15, 20, 10],
        "–ù–µ –æ—á–µ–Ω—å –∂–∏–≤–æ–π –º—É–∂–∏–∫(–∑–æ–º–±–∏)": [10, 15, 5],
        "–†–æ–±–æ-–º—É–∂–∏–∫": [20, 20, 15],
        "–°–∫–µ–ª–µ—Ç": [10, 10, 10],
        "–ü—Ä–∏–∑—Ä–∞–∫": [25, 25, 30],
        "–ü—Ä–∏–∑—Ä–∞–∫-–º—É–∂–∏–∫–∞": [30, 30, 30],
        "–ü–∞—Ä–∞–∑–∏—Ç": [5, 20, 2]
    }

    def __init__(self, level):
        self.name = random.choice(list(self.enemies))
        self.hp = self.enemies[self.name][0] + ((level - 1) * 10)
        self.damage = self.enemies[self.name][1] + ((level - 1) * 10)
        self.exp = self.enemies[self.name][2]


def delay(sec: int):
    asyncio.run(asyncio.sleep(sec))


def read_player(msg: Message):
    return users.read("user_id", msg.chat.id)


def write_player(player: list):
    users.write(player)


@bot.message_handler(["start"])
def start(msg: Message):
    if is_new_player(msg):
        temp[msg.chat.id] = {"name": None}
        reg_1(msg)
    else:
        menu(msg)


def reg_1(msg):
    bot.send_message(msg.chat.id, text.text % msg.from_user.first_name)
    bot.register_next_step_handler(msg, reg_2)


def reg_2(msg: Message):
    if not temp[msg.chat.id]["name"]:
        temp[msg.chat.id]["name"] = msg.text
        kb = RKM(True, True)
        kb.row("–∑–µ–º–ª—èüåç", "–≤–æ–¥–∞üí¶")
        kb.row("–æ–≥–æ–Ω—åüî•", "–≤–æ–∑–¥—É—Öüå¨Ô∏è")
        bot.send_message(msg.chat.id, "–≤—ã–±–µ—Ä–∏ —Å—Ç–∏—Ö–∏—é:", reply_markup=kb)
        bot.register_next_step_handler(msg, reg_3)


def reg_3(msg: Message):
    if msg.text == "–æ–≥–æ–Ω—åüî•":
        temp[msg.chat.id]["name"] = None
        bot.send_message(msg.chat.id, "–º–∞–≥–∏—è –æ–≥–Ω—è –ø–æ–¥ –∑–∞–ø—Ä–µ—Ç–æ–º!–≤—ã–±–∏—Ä–∞–π –¥—Ä—É–≥—É—é –º–∞–≥–∏—é!")
        reg_1(msg)
    else:
        temp[msg.chat.id]["power"] = msg.text
        hp, damage = fight.powers[msg.text]
        users.write([msg.chat.id, temp[msg.chat.id]["name"],
                     temp[msg.chat.id]["power"], hp, damage, 1, 0, hp, 0, 0])
        eat.write([msg.chat.id, {}])
        print("–∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        bot.send_message(msg.chat.id, text.text_2)
        delay(2)
        menu(msg)


@bot.message_handler(["menu"])
def menu(msg: Message):
    bot.send_message(msg.chat.id, text.menu, reply_markup=clear)


@bot.message_handler(commands=["home"])
def home(msg: Message):
    kb = RKM(True, True)
    kb.row("–æ—Ç–¥–æ—Ö–Ω—É—Ç—å", "–ø–µ—Ä–µ–∫—É—Å–∏—Ç—å")
    kb.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    bot.send_message(msg.chat.id, text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ª–∞–≥–µ—Ä–µ", reply_markup=kb)
    bot.register_next_step_handler(msg, home_handler, kb)


def home_handler(msg: Message, kb):
    if msg.text == "–æ—Ç–¥–æ—Ö–Ω—É—Ç—å":
        sleep(msg)
    elif msg.text == "–ø–µ—Ä–µ–∫—É—Å–∏—Ç—å":
        eat_food(msg)
    elif msg.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        menu(msg)
    else:
        bot.send_message(msg.chat.id, text="–¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=kb)
        bot.register_next_step_handler(msg, home_handler, kb)


@bot.message_handler(commands=["stats"])
def stats(msg: Message):
    player = read_player(msg)
    y = (f"–ò–º—è:{player[1]}\n"
         f"ID:{player[0]}\n"
         f"–°—Ç–∏—Ö–∏—è:{player[2]}\n"
         f"–ó–¥–æ—Ä–æ–≤—å–µ‚ù§Ô∏è:{player[3]}\n"
         f"–£—Ä–æ–≤–µ–Ω—å:{player[5]}\n"
         f"–£—Ä–æ–Ω:{player[4]}\n"
         f"–û–ø—ã—Ç:{player[6]}\n")
    _, food = eat.read("user_id", msg.chat.id)
    for j in food:
        y += f"{j}:{food[j][1]}\n"
    bot.send_message(msg.chat.id, y)
    menu(msg)


@bot.message_handler(commands=["square"])
def square(msg: Message):
    kb = RKM(True, True)
    kb.row("–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –ª–æ–≤–∫–æ—Å—Ç–∏", "–ø–æ–π—Ç–∏ –≤ –±–æ–π")
    kb.row("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
    bot.send_message(msg.chat.id, text="–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ.", reply_markup=kb)
    bot.register_next_step_handler(msg, square_handler, kb)


def square_handler(msg: Message, kb):
    if msg.text == "–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –ª–æ–≤–∫–æ—Å—Ç–∏":
        player = read_player(msg)
        if player[8] >= 2:
            bot.send_message(msg.chat.id, text="–¢—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–∏.")
            delay(2)
            menu(msg)
        else:
            bot.send_message(msg.chat.id, text="–°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Ç–≤–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ,—Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ 5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥ –æ—Ç—Ä–∞–∑–∏—Ç—å "
                                               "–∞—Ç–∞–∫—É –∏ —É—Å–ø–µ–≤–∞—Ç—å –∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã.")
            delay(10)
            kb = RKM(True, True)
            kb.row("–í—ã–π—Ç–∏", "–ù–µ—Ç —Å–ø–∞—Å–∏–±–æ")
            bot.send_message(msg.chat.id, text="–ï—Å–ª–∏ —Ç—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É —Ç—ã –º–æ–∂–µ—à—å –≤—ã–π—Ç–∏.", reply_markup=kb)
            bot.register_next_step_handler(msg, dls, kb)
    elif msg.text == "–ø–æ–π—Ç–∏ –≤ –±–æ–π":
        find_enemy(msg)
    elif msg.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        menu(msg)
    else:
        bot.send_message(msg.chat.id, text="–¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=kb)
        bot.register_next_step_handler(msg, square_handler, kb)


def dls(msg: Message, kb):
    if msg.text == "–í—ã–π—Ç–∏":
        square(msg)
    elif msg.text == "–ù–µ—Ç —Å–ø–∞—Å–∏–±–æ":
        block(msg)
    else:
        bot.send_message(msg.chat.id, text="–¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫", reply_markup=kb)
        bot.register_next_step_handler(msg, dls, kb)


def block(msg: Message):
    try:
        print(temp[msg.chat.id])
    except KeyError:
        temp[msg.chat.id] = {}
    try:
        print(temp[msg.chat.id]["win"])
    except KeyError:
        temp[msg.chat.id]["win"] = 0
    bot.send_message(msg.chat.id, text="–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –∞—Ç–∞–∫–µ.", reply_markup=clear)
    delay(3)
    sides = ["–°–ª–µ–≤–∞", "–°–ø—Ä–∞–≤–∞", "–°–≤–µ—Ä—Ö—É", "–°–Ω–∏–∑—É"]
    random.shuffle(sides)
    kb = RKM(True, True)
    kb.row(sides[0], sides[3])
    kb.row(sides[1], sides[2])
    right = random.choice(sides)
    bot.send_message(msg.chat.id, text=f"–ó–∞—â–∏—â–∞–π—Å—è!–£–¥–∞—Ä {right}", reply_markup=kb)
    temp[msg.chat.id]["block_start"] = datetime.datetime.now().timestamp()
    bot.register_next_step_handler(msg, block_handler, right)


def block_handler(msg: Message, right):
    temp[msg.chat.id]["block_finish"] = datetime.datetime.now().timestamp()
    if temp[msg.chat.id]["block_finish"] - temp[msg.chat.id]["block_start"] < 3 and right == msg.text:
        temp[msg.chat.id]["win"] += 1
        if temp[msg.chat.id]["win"] == 5:
            temp[msg.chat.id]["win"] = 0
            level_up(msg)
            bot.send_message(msg.chat.id, text="–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –æ–∫–æ–Ω—á–µ–Ω–æ.")
            player = read_player(msg)
            player[8] += 1
            write_player(player)
            delay(3)
            menu(msg)
        else:
            bot.send_message(msg.chat.id, text="–ö—Ä–∞—Å–∞–≤—á–∏–∫,–º–æ–ª–æ–¥–µ—Ü,–ª—É—á—à–∏–π –ø—Ä–æ—Å—Ç–æ")
            delay(2)
            block(msg)
    else:
        temp[msg.chat.id]["win"] = 0
        bot.send_message(msg.chat.id, text="–¢—ã –Ω–µ —Å–ø—Ä–∞–≤–∏–ª—Å—è.")
        kb = RKM(True, True)
        kb.row("–î–∞", "–ù–µ—Ç")
        bot.send_message(msg.chat.id, text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø—ã—Ç–∞–Ω–∏–µ?", reply_markup=kb)
        bot.register_next_step_handler(msg, block_handler_2)


def block_handler_2(msg: Message):
    if msg.text == "–ù–µ—Ç":
        menu(msg)
    else:
        block(msg)


def level_up(msg: Message):
    player = read_player(msg)
    player[7] = round(player[7] * 1, 5)
    player[3] = player[7]
    player[4] = round(player[4] * 2)
    player[5] += 1
    write_player(player)
    bot.send_message(msg.chat.id, text="–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—ã—à–µ–Ω,—É —Ç–µ–±—è –≤—Å—ë —Ö–æ—Ä–æ—à–æ.")


@bot.message_handler(["add_heal"])
def heal(msg: Message):
    _, food = eat.read("user_id", msg.chat.id)
    food["–º—è—Å–æ"] = [25, 15]
    food["–≤–æ–¥–∞"] = [15, 30]
    eat.write([msg.chat.id, food])
    bot.send_message(msg.chat.id, text="–≤–∞–º –≤—ã–¥–∞–ª–∏ –µ–¥—É")


def find_enemy(msg: Message):
    bot.send_message(msg.chat.id, text="–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ —Å—Ç—Ä–∞—à–Ω—ã–π –ª–µ—Å –ø–æ–∏—Å–∫–∞—Ç—å –≤—Ä–∞–≥–æ–≤.")
    delay(3)
    new_enemy(msg)


def new_enemy(msg: Message):
    player = read_player(msg)
    enemy = Enemy(player[5])
    print(enemy.__dict__)
    kb = RKM(True, True)
    kb.row("–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ. –æ –≤—Ä–∞–≥–µ")
    kb.row("–û–±–æ–π–¥—É—Å—å")
    bot.send_message(msg.chat.id, text="–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–±–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –ø–ª–∞—Ç—É.", reply_markup=kb)
    bot.register_next_step_handler(msg, info, enemy)


def info(msg: Message, enemy):
    if msg.text == "–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ. –æ –≤—Ä–∞–≥–µ":
        player = read_player(msg)
        if player[9] >= 5:
            player[9] -= 5
            write_player(player)
            bot.send_message(msg.chat.id, text=f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
                                               f"–∏–º—è:{enemy.name},"
                                               f"–∑–¥–æ—Ä–æ–≤—å–µ:{enemy.hp},"
                                               f"—É—Ä–æ–Ω:{enemy.damage},"
                                               f"–æ–ø—ã—Ç:{enemy.exp}.")
        else:
            bot.send_message(msg.chat.id, text="–ù–µ –æ–±–º–∞–Ω—ã–≤–∞–π —Ç—É—Ç –Ω–µ 5 –º–æ–Ω–µ—Ç!")
    elif msg.text == "–û–±–æ–π–¥—É—Å—å":
        bot.send_message(msg.chat.id, text="–ù—É –∏ –ª–∞–¥–Ω–æ.")
    delay(2)
    bot.send_message(msg.chat.id, text="–í—Ä–∞–≥ –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ç–µ–±—è.–£–±–µ–π –µ–≥–æ!", reply_markup=clear)
    delay(4)
    attack(msg, enemy)


def attack(msg: Message, enemy: Enemy):
    a = random.randint(1, 2)
    if a == 1:
        if hero_attack(msg, enemy):
            if enemy_attack(msg, enemy):
                attack(msg, enemy)
            else:
                defeat(msg, enemy)
        else:
            win(msg, enemy)
    else:
        if enemy_attack(msg, enemy):
            if hero_attack(msg, enemy):
                attack(msg, enemy)
            else:
                win(msg, enemy)
        else:
            defeat(msg, enemy)


def win(msg: Message, enemy: Enemy):
    delay(3)
    bot.send_message(msg.chat.id, text=f"–¢—ã –ø–æ–ª—É—á–∏—à—å {enemy.exp} –æ–ø—ã—Ç–∞")
    player = read_player(msg)
    player[6] += enemy.exp
    write_player(player)
    max_exp = 100 * (2 ** (player[5] - 1))
    if player[6] >= max_exp:
        player[6] -= max_exp
        write_player(player)
        level_up(msg)
        player = read_player(msg)
        need_exp = 100 * (2 ** (player[5] - 1)) - player[6]
        bot.send_message(msg.chat.id, text=f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è {need_exp} –æ–ø—ã—Ç–∞.")
    else:
        bot.send_message(msg.chat.id, text=f"–£ —Ç–µ–±—è {player[6]} –æ–ø—ã—Ç–∞")
    delay(2)
    menu(msg)


def defeat(msg: Message, enemy: Enemy):
    delay(3)
    player = read_player(msg)
    bot.send_message(msg.chat.id, text=f"–£ —Ç–µ–±—è –æ—Ç–±–µ—Ä—É—Ç {enemy.exp} –æ–ø—ã—Ç–∞")
    player[3] = 1
    if player[5] != 1:
        if player[6] > enemy.exp:
            player[6] -= enemy.exp
        else:
            player[6] = 0
    else:
        bot.send_message(msg.chat.id, text="–£ —Ç–µ–±—è 1 —É—Ä–æ–≤–µ–Ω—å,–ø–æ—ç—Ç–æ–º—É —Ç–≤–æ–π –æ–ø—ã—Ç –Ω–µ —Å–Ω–∏–∑–∏—Ç—Å—è.")
    write_player(player)
    delay(2)
    menu(msg)


def hero_attack(msg: Message, enemy: Enemy):
    player = read_player(msg)
    chance = random.randint(1, 100)
    delay(2)
    if chance <= 50:
        enemy.hp -= player[4]
    elif chance in range(51, 81):
        bot.send_message(msg.chat.id, text="–¢—ã –ø—Ä–æ–º–∞–∑–∞–ª.")
    else:
        enemy.hp -= player[4] * 2
        bot.send_message(msg.chat.id, text="–¢—ã –Ω–∞–Ω–µ—Å –∫—Ä–∏—Ç. —É—Ä–æ–Ω")
    if enemy.hp <= 0:
        bot.send_message(msg.chat.id, text="–¢—ã —É–±–∏–ª –≤—Ä–∞–≥–∞.–¢—ã –ø–æ–±–µ–¥–∏–ª,–º–æ–ª–æ–¥–µ—Ü.")
        return False
    else:
        bot.send_message(msg.chat.id, text=f"–£ –≤—Ä–∞–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å {enemy.hp}‚ù§Ô∏è")
        return True


def enemy_attack(msg: Message, enemy: Enemy):
    player = read_player(msg)
    chance = random.randint(1, 100)
    delay(2)
    if chance <= 50:
        player[3] -= enemy.damage
    elif chance in range(51, 81):
        bot.send_message(msg.chat.id, text="–í—Ä–∞–≥ –ø—Ä–æ–º–∞–∑–∞–ª.")
    else:
        player[3] -= enemy.damage * 2
        bot.send_message(msg.chat.id, text="–í—Ä–∞–≥ –Ω–∞–Ω–µ—Å –∫—Ä–∏—Ç. —É—Ä–æ–Ω")
    write_player(player)
    if player[3] <= 0:
        bot.send_message(msg.chat.id, text="–í—Ä–∞–≥ –ø–æ–±–µ–¥–∏–ª.–¢—Ä–µ–Ω–∏—Ä—É–π—Å—è")
        return False
    else:
        bot.send_message(msg.chat.id, text=f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {player[3]}‚ù§Ô∏è")
        return True


def eat_food(msg: Message):
    player = read_player(msg)
    if player[3] >= player[7]:
        bot.send_message(msg.chat.id, text="–¢—ã –Ω–∞–µ–ª—Å—è")
        menu(msg)
    else:
        kb = IKM()
        _, food = eat.read("user_id", msg.chat.id)
        if food == {}:
            bot.send_message(msg.chat.id, text="–£ —Ç–µ–±—è –Ω–µ—Ç –µ–¥—ã")
            menu(msg)
        else:
            for key in food:
                kb.row(IB(f"{key} –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ—Ç {food[key][0]}‚ù§Ô∏è -- {food[key][1]} —à—Ç.",
                          callback_data=f"food_{key}_{food[key][0]}"))
            bot.send_message(msg.chat.id, text="–ß—Ç–æ –±—É–¥–µ—à—å –µ—Å—Ç—å?", reply_markup=kb)


def eating(msg: Message, key, hp):
    _, food = eat.read("user_id", msg.chat.id)
    player = read_player(msg)
    if food[key][1] == 1:
        del food[key]
    else:
        food[key][1] -= 1
    eat.write([msg.chat.id, food])
    player[3] += int(hp)
    if player[3] >= player[7]:
        player[3] = player[7]
    users.write(player)
    print("–∏–≥—Ä–æ–∫ –ø–æ–µ–ª")


@bot.callback_query_handler(func=lambda call: True)
def callback_handler(callback: CallbackQuery):
    print(callback.data)
    if callback.data.startswith("food_"):
        a = callback.data.split("_")
        print(a)
        eating(callback.message, a[1], a[2])
        player = read_player(callback.message)
        bot.answer_callback_query(callback.id, f"–¢—ã –ø–æ–ø–æ–ª–Ω–∏–ª —Ö–ø,—Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è {player[3]}‚ù§Ô∏è", True)
        if player[3] >= player[7]:
            bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)
            bot.send_message(callback.message.chat.id, text="–¢—ã –Ω–∞–µ–ª—Å—è –∏ —Å–ø–∏—à—å")
            menu(callback.message)
        else:
            kb = IKM()
            _, food = eat.read("user_id", callback.message.chat.id)
            if food == {}:
                bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)
                bot.send_message(callback.message.chat.id, text="–£ —Ç–µ–±—è –Ω–µ—Ç –µ–¥—ã")
                menu(callback.message)
            else:
                for key in food:
                    kb.row(IB(f"{key} –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–∏–≤–∞–µ—Ç {food[key][0]}‚ù§Ô∏è -- {food[key][1]} —à—Ç.",
                              callback_data=f"food_{key}_{food[key][0]}"))
                bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id, reply_markup=kb)
    if callback.data.startswith("sleep_"):
        a = callback.data.split("_")
        t = int(a[1]) * 3
        bot.send_message(callback.message.chat.id, text=f"–¢–≤–æ–π —Å–æ–Ω –∑–∞–π–º–µ—Ç {t}—Å–µ–∫—É–Ω–¥.")
        delay(t)
        sleeping(callback.message, a[1])
        bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)
        bot.send_message(callback.message.chat.id, text="–¢—ã –ø–æ—Å–ø–∞–ª.–ò–¥–∏ –≥—É–ª—è–π.")
        menu(callback.message)
    if callback.data == "menu":
        bot.edit_message_reply_markup(callback.message.chat.id, callback.message.message_id)
        menu(callback.message)


def sleep(msg: Message):
    player = read_player(msg)
    need = player[7] - player[3]
    if need > 0:
        kb = IKM()
        kb.row(IB(f"–ø–æ—Å–ø–∞—Ç—å+{need}‚ù§Ô∏è", callback_data=f"sleep_{need}"))
        kb.row(IB(f"–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="menu"))
        bot.send_message(msg.chat.id, text="–≤—ã–±–µ—Ä–∏ —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å", reply_markup=kb)
    else:
        bot.send_message(msg.chat.id, text="—Ç—ã –Ω–µ —Ö–æ—á–µ—à—å —Å–ø–∞—Ç—å", reply_markup=clear)
        menu(msg)


def sleeping(msg: Message, hp):
    player = read_player(msg)
    player[3] += int(hp)
    write_player(player)
    print("–∏–≥—Ä–æ–∫ –ø–æ—Å–ø–∞–ª")


bot.infinity_polling()
